// Generated by CoffeeScript 1.4.0
(function() {
  var FUNDDY,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  FUNDDY = FUNDDY || {};

  FUNDDY.CustomSelect = {};

  FUNDDY.CustomSelect.Presenter = (function() {

    Presenter.prototype.placeholderSelected = false;

    function Presenter(view) {
      this.view = view;
      this.select = __bind(this.select, this);

      this.blur = __bind(this.blur, this);

      this.focus = __bind(this.focus, this);

      this.subscribeEvents();
      this.placeholderSelected = !!this.view.getPlaceholder();
    }

    Presenter.prototype.subscribeEvents = function() {
      this.view.onFocus(this.focus);
      this.view.onBlur(this.blur);
      return this.view.onChange(this.select);
    };

    Presenter.prototype.focus = function() {
      return this.view.showAsFocused();
    };

    Presenter.prototype.blur = function() {
      if (this.placeholderSelected) {
        return this.view.showAsPlaceholder();
      } else {
        return this.view.showAsBlur();
      }
    };

    Presenter.prototype.select = function(text) {
      this.placeholderSelected = text === this.view.getPlaceholder();
      return this.view.setSelectedText(text);
    };

    return Presenter;

  })();

  FUNDDY.CustomSelect.View = (function() {
    var FOCUS_CLASS, PLACEHOLDER_CLASS, TEXT_NODE_TYPE;

    PLACEHOLDER_CLASS = "custom-select--placeholder";

    FOCUS_CLASS = "custom-select--focus";

    TEXT_NODE_TYPE = 3;

    function View(elements) {
      var placeholder;
      this.elements = elements;
      placeholder = this.getPlaceholder();
      if (!placeholder) {
        this.setSelectedText(this.getSelectedText());
        return;
      }
      this.elements.select.prepend(this.createDefaultPlaceholderOption(placeholder));
      this.setSelectedText(placeholder);
      this.showAsPlaceholder();
    }

    View.prototype.createDefaultPlaceholderOption = function(placeholder) {
      return this.elements.placeholderOption.text(placeholder);
    };

    View.prototype.getPlaceholder = function() {
      return this.elements.select.attr("placeholder");
    };

    View.prototype.getSelectedText = function() {
      return this.elements.select.find(":selected").text();
    };

    View.prototype.onFocus = function(callback) {
      return this.elements.select.on("focus", callback);
    };

    View.prototype.onBlur = function(callback) {
      return this.elements.select.on("blur", callback);
    };

    View.prototype.onChange = function(callback) {
      var _this = this;
      return this.elements.select.on("change", function() {
        var text;
        text = _this.getSelectedText();
        return callback(text);
      });
    };

    View.prototype.showAsFocused = function() {
      return this.elements.container.removeClass(PLACEHOLDER_CLASS).addClass(FOCUS_CLASS);
    };

    View.prototype.showAsBlur = function() {
      return this.elements.container.removeClass(FOCUS_CLASS);
    };

    View.prototype.showAsPlaceholder = function() {
      return this.elements.container.removeClass(FOCUS_CLASS).addClass(PLACEHOLDER_CLASS);
    };

    View.prototype.removeStyles = function() {
      return this.elements.container.removeClass(PLACEHOLDER_CLASS).removeClass(FOCUS_CLASS);
    };

    View.prototype.setSelectedText = function(text) {
      var textNode, textNodes;
      textNodes = this.getContainerTextNodes();
      if (textNodes.length > 0) {
        textNode = textNodes[textNodes.length - 1];
        $(textNode).remove();
      }
      return this.elements.container.append(document.createTextNode(text));
    };

    View.prototype.getContainerTextNodes = function() {
      return this.elements.container.children(":not(iframe)").addBack().contents().filter(function() {
        return this.nodeType === TEXT_NODE_TYPE && ($.trim(this.nodeValue) !== "");
      });
    };

    return View;

  })();

  (function(jQuery) {
    return jQuery.fn.customSelect = function() {
      var sel, select, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        sel = this[_i];
        select = $(sel);
        _results.push(new FUNDDY.CustomSelect.Presenter(new FUNDDY.CustomSelect.View({
          select: select,
          container: select.parent(),
          placeholderOption: $('<option disabled="true" selected="selected"></option>')
        })));
      }
      return _results;
    };
  })(jQuery);

}).call(this);
